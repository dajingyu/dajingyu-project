import{_ as e,c as a,o as l,a2 as i}from"./chunks/framework.By8LAshg.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"自检列表/前端工程/index.md","filePath":"自检列表/前端工程/index.md"}'),t={name:"自检列表/前端工程/index.md"},o=i('<h2 id="谈谈-webpack" tabindex="-1">谈谈 Webpack <a class="header-anchor" href="#谈谈-webpack" aria-label="Permalink to &quot;谈谈 Webpack&quot;">​</a></h2><ol><li>概念</li></ol><p>静态模块打包工具，可以将静态模块编译、打包和输出成一个或多个文件（bundles）。</p><ol start="2"><li>5 个核心概念</li></ol><ul><li>入口(entry): 指示 webpack 从哪个文件开始打包。</li><li>输出(output): 指示 webpack 编译、打包后的文件输出到哪里去。</li><li>加载器(loader): webpack 只能识别 js、json 文件，其他类型的文件需要通过 loader 转化成有效模块才能识别。 <ul><li>比如：处理样式文件可以使用 css-loader\\style-loader\\less-loader\\sass-loader</li><li>处理 vue 文件可以使用 vue-loader</li></ul></li><li>插件(plugin): 相对 loader，plugin 可以做范围更广的工作，比如：打包优化，资源管理，注入环境变量。 <ul><li>比如：处理 html 资源需要使用 html-webpack-plugin</li><li>eslint 语法风格检查需要使用 eslint-webpack-plugin</li></ul></li><li>模式(mode): 可以选择 development, production 或 none 之中的一个。不同模式会加载不同的配置。</li></ul><h2 id="webpack-优化" tabindex="-1">webpack 优化 <a class="header-anchor" href="#webpack-优化" aria-label="Permalink to &quot;webpack 优化&quot;">​</a></h2><h2 id="vite-和-webpack-的区别" tabindex="-1">vite 和 webpack 的区别 <a class="header-anchor" href="#vite-和-webpack-的区别" aria-label="Permalink to &quot;vite 和 webpack 的区别&quot;">​</a></h2><ol><li>底层语言不同</li></ol><p>Vite 是基于 esbuild 采用 go 语言编写，go 语言的操作是纳秒级别</p><p>Webpack 是基于 Nodejs，以毫秒计数</p><p>所以 vite 比 webpack 更快。</p><ol start="2"><li>启动方式</li></ol><p>webpack 启动慢：webpack 首先分析各个模块之间的依赖，然后将所有内容进行打包，模块越多打包速度越慢，所以启动慢。</p><p>vite 启动快：vite 采用了一种懒加载的方式，它在启动的时候不需要打包，而是需要某个模块时，再对模块内容进行编译，所以启动很快</p><ol start="3"><li>首屏渲染</li></ol><p>webpack 渲染快：webpack 启动时已经将所有内容进行打包了，渲染时直接获取资源渲染即可</p><p>vite 渲染慢：Vite 渲染时才会打包编译文件，然后再渲染，打包越慢，渲染速度越慢（但是 vite 有缓存，所以第二次渲染速度没问题）</p><ol start="4"><li>生态</li></ol><p>webpack 诞生很久了，生态基本完善</p><p>vite 生态不够全，对代码分割不够友好</p>',20),p=[o];function c(r,s,n,d,b,k){return l(),a("div",null,p)}const h=e(t,[["render",c]]);export{_ as __pageData,h as default};
