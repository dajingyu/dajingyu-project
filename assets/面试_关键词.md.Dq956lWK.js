import{_ as s,c as i,o as a,a2 as l}from"./chunks/framework.By8LAshg.js";const y=JSON.parse('{"title":"面试关键词","description":"","frontmatter":{},"headers":[],"relativePath":"面试/关键词.md","filePath":"面试/关键词.md"}'),n={name:"面试/关键词.md"},p=l(`<h1 id="面试关键词" tabindex="-1">面试关键词 <a class="header-anchor" href="#面试关键词" aria-label="Permalink to &quot;面试关键词&quot;">​</a></h1><h2 id="css相关" tabindex="-1">css相关 <a class="header-anchor" href="#css相关" aria-label="Permalink to &quot;css相关&quot;">​</a></h2><ul><li>圆形、三角形、扇形、菱形</li><li>三栏、圣杯、双飞翼、吸顶</li><li>重绘和重排</li><li>过渡 transition  4个属性</li><li>动画： <ul><li>transform （4个函数加中心点）</li><li>animation</li></ul></li><li>flex布局</li><li>grid布局</li></ul><h2 id="js相关" tabindex="-1">js相关 <a class="header-anchor" href="#js相关" aria-label="Permalink to &quot;js相关&quot;">​</a></h2><ul><li><p>数据类型（几种类型; 拆箱方式; 判断类型方式，原型，闭包，this）</p></li><li><p>所有的引用类型（数组、对象、函数），其隐式原型指向其构造函数的显式原型；<code>（obj._proto_ === Object.prototype）</code></p></li><li><p>new关键字(设置新对象的 constructor 属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的 prototype 对象)</p></li><li><p>EventLoop机制: 点击这里</p></li><li><p>异步操作</p></li><li><p>数组方法（map、reduce、filter ）</p></li><li><p>bind()与call()和apply()?</p><ul><li>都能指定函数中的this * call()/apply()是立即调用函数 * bind()是将函数返回 * bind与call传参数都是直接传，apply参数放到数组中</li></ul></li><li><p>es6常用语法（完整描述）</p><ul><li>Proxy拦截</li><li>defer和async</li><li>let const</li><li>解构赋值</li><li>模板字符串</li><li>箭头函数</li><li>...</li><li>形参默认值</li><li>promise对象</li><li>对象拓展</li><li>Object.assign</li><li>数组方法扩展</li><li>find</li><li>findIndex</li><li>for of循环</li><li>字符串</li><li>includes(), startsWith(), endsWith(),</li><li>repeat()</li></ul></li></ul><h2 id="一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么" tabindex="-1">一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？ <a class="header-anchor" href="#一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么" aria-label="Permalink to &quot;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？&quot;">​</a></h2><p>浏览器渲染原理 参考 缓存的应用 参考</p><p>查看答案</p><p>尚硅谷版本</p><p>涉及的知识点：</p><p>2.请求数据到请求结束与服务器进行了几次交互 3.可详细描述浏览器从输入URL到页面展现的详细过程 4.浏览器解析HTML代码的原理，以及构建DOM树的流程 5.浏览器如何解析CSS规则，并将其应用到DOM树上 6.浏览器如何将解析好的带有样式的DOM树进行绘制 7.浏览器的运行机制，如何配置资源异步同步加载 8.浏览器回流与重绘的底层原理，引发原因，如何有效避免</p><h2 id="浏览器原理" tabindex="-1">浏览器原理 <a class="header-anchor" href="#浏览器原理" aria-label="Permalink to &quot;浏览器原理&quot;">​</a></h2><p>1.各浏览器使用的JavaScript引擎以及它们的异同点、如何在代码中进行区分 2.浏览器的垃圾回收机制，如何避免内存泄漏</p><p>http相关 http协议， 版本重要更新， 渲染机制 状态码 报文 三次握手，4次挥手 https</p><h2 id="性能优化的点以及安全性的点" tabindex="-1">性能优化的点以及安全性的点 <a class="header-anchor" href="#性能优化的点以及安全性的点" aria-label="Permalink to &quot;性能优化的点以及安全性的点&quot;">​</a></h2><ol><li><p>文件合并</p></li><li><p>文件最小化/文件压缩</p></li><li><p>使用 CDN 托管</p></li><li><p>缓存的使用（多个域名来提供缓存）</p></li><li><p>其他</p></li><li><p>优化图片</p></li><li><p>图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）</p></li><li><p>优化CSS（压缩合并css，如 margin-top, margin-left...)</p></li><li><p>网址后加斜杠（如www.campr.com/目录，会判断这个目录是什么文件类型，或者是目录。）</p></li><li><p>标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。</p></li></ol><p>当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了）</p><ol start="6"><li><p>减少http请求（合并文件，合并图片）</p></li><li><p>减少http请求次数：CSS Sprites, JS、CSS 源码压缩、图片大小控制合适；网页 Gzip，CDN 托管，data 缓存 ，图片服务器</p></li><li><p>前端模板 JS + 数据，减少由于HTML标签导致的带宽浪费，前端用变量保存 AJAX 请求结果，每次操作本地变量，不用请求，减少请求次数</p></li><li><p>用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能</p></li><li><p>当需要设置的样式很多时设置 className 而不是直接操作 style</p></li><li><p>少用全局变量、缓存DOM节点查找的结果。减少 IO 读取操作</p></li><li><p>避免使用 CSS Expression（css表达式)又称 Dynamic properties(动态属性)</p></li><li><p>图片预加载，将样式表放在顶部，将脚本放在底部，加上时间戳</p></li></ol><p>3.优化：</p><p>1、浏览器自己的优化：浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p><p>2、我们要注意的优化：</p><p>我们要减少重绘和重排就是要减少对渲染树的操作，则我们可以合并多次的DOM和样式的修改。并减少对style样式的请求。</p><p>（1）直接改变元素的className-减少对style样式的修改，直接改变元素的className</p><p>（2）display：none；先设置元素为display：none；然后进行页面布局等操作；设置完成后将元素设置为display：block；这样的话就只引发两次重绘和重排；-先隐藏，再显示</p><p>（3）不要经常访问浏览器的flush队列属性；如果一定要访问，可以利用缓存。将访问的值存储起来，接下来使用就不会再引发回流；</p><p>//显然这种方法低效，每次移动都要查询偏移量，导致浏览器刷新渲染队列而不利于优化。好的办法是获取一次起始位置的值，然后赋值给一个变量。如下</p><p>（4）使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘；</p><p>（5）将需要多次重排的元素，position属性设为absolute或fixed，元素脱离了文档流，它的变化不会影响到其他元素；</p><p>（6）如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document；</p><p>（7）尽量不要使用table布局。</p><p>Webpack的编译原理、构建流程、热更新原理，chunk、bundle和module的区别和应用</p><p>所有的文件都是模块(html除外)</p><p>webpack本身只能加载js模块，加载其他的模块需要依赖对应的loader</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/js/entry.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//入口文件的路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output: {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出文件的配置 path: __dirname + &#39;/dist/js/&#39;,//输出文件的路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">publicPath : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist/js/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//webpack的绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出的文件名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loaders: [</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//加载对应的loader</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style!css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(png</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">jpg)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;url-loader?limit=8192&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用webpack-dev-server的时候需要注意的地方</p><p>webpack-dev-server为根文件夹下的index.html提供内置的服务</p><p>如果其他目录下的文件提供服务需要在此设置目录(我们设置为build文件夹) devServer:{ contentBase: &#39;./build&#39;,//内置服务器生成的打包的js文件的服务路径 historyApiFallback:true,//不跳转 inline:true, port : 5000 } 打包图片使用url-loader时候注意的问题</p><p>当图片大于8kb的是无法打包到主文件里</p><p>导致图片的路径发生错误</p><p>解决办法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publicPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist/js/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//webpack的绝对路径</span></span></code></pre></div><h2 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-label="Permalink to &quot;函数柯里化&quot;">​</a></h2><p>什么是柯里化</p><p>函数柯里化的定义：是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p>例如我们在使用ajax的时候url是不变的，但是传递的参数不同将返回不同的数据，那么我们就可以把url封装到一个函数里然后返回一个带参数的函数，通过返回的函数去处理不同参数的情况</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestCurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                method:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;post&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url:url,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                data:{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestCurry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://192.168.0.0.1/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求参数code为112</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    code:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">112</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //请求成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//请求参数code为114</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    code:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">114</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //请求成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>上面的两个请求参数不同，但是请求的地址url是固定不变的。这就是柯里化，将不变的参数通过闭包的形式封装起来，然后去处理可变的参数 lodash中有一个柯里化方法curry。举个官网的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> abc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [a, b, c];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curried </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abc);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curried</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; [1, 2, 3]</span></span></code></pre></div><p>三大框架的对比 <code>https://baijiahao.baidu.com/s?id=1702600290036053994&amp;wfr=spider&amp;for=pc</code></p><p>vue和React都有虚拟Dom  angular没有</p><p>体积，vue最小 angulr最大</p><p>生态</p><p>使用量 类 继承和实现</p><h2 id="异步解决方案" tabindex="-1">异步解决方案 <a class="header-anchor" href="#异步解决方案" aria-label="Permalink to &quot;异步解决方案&quot;">​</a></h2><p>promise generator callback，回调函数 setimeout 发布/订阅模式 事件监听</p><h2 id="防抖-截流概念及应用场景" tabindex="-1">防抖，截流概念及应用场景 <a class="header-anchor" href="#防抖-截流概念及应用场景" aria-label="Permalink to &quot;防抖，截流概念及应用场景&quot;">​</a></h2><p>参考 相同：都是防止某一时间段内，函数被频繁调用执行，通过时间频率控制，减少回调函数执行次数，来实现相关性能优化。</p><p>区别：“防抖”是某一时间内只执行一次，最后一次触发后过段时间执行，而“节流”则是间隔时间执行，间隔时间固定。</p><ul><li>防抖应用场景 <ul><li>文本输入搜索联想</li><li>文本输入验证（包括 Ajax 后端验证）</li></ul></li><li>节流应用场景 <ul><li>鼠标点击</li><li>监听滚动 scroll</li><li>窗口 resize</li><li>mousemove 拖拽</li></ul></li></ul><h2 id="vue-相关" tabindex="-1">vue 相关 <a class="header-anchor" href="#vue-相关" aria-label="Permalink to &quot;vue 相关&quot;">​</a></h2><ul><li><p>路由：参考</p><ul><li>全局守卫</li><li>独享守卫</li><li>组件内守卫</li></ul></li><li><p>指令</p></li><li><p>自定义指令</p></li><li><p>钩子函数</p></li><li><p>传参方式</p></li><li><p>请求封装</p></li><li><p>hooks</p></li><li><p>组件封装</p></li><li><p>插槽</p></li><li><p>状态管理工具 vuex 和pinia区别</p></li><li><p>Vue双向数据绑定以及Diff算法原理</p></li></ul>`,61),h=[p];function t(k,e,r,E,d,g){return a(),i("div",null,h)}const o=s(n,[["render",t]]);export{y as __pageData,o as default};
