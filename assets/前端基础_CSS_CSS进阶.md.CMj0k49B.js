import{_ as a,c as i,o as e,a2 as t}from"./chunks/framework.By8LAshg.js";const k=JSON.parse('{"title":"css进阶","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/CSS/CSS进阶.md","filePath":"前端基础/CSS/CSS进阶.md"}'),s={name:"前端基础/CSS/CSS进阶.md"},n=t(`<h1 id="css进阶" tabindex="-1">css进阶 <a class="header-anchor" href="#css进阶" aria-label="Permalink to &quot;css进阶&quot;">​</a></h1><h2 id="css中-link-和-import-的区别是" tabindex="-1">CSS中 link 和@import 的区别是？ <a class="header-anchor" href="#css中-link-和-import-的区别是" aria-label="Permalink to &quot;CSS中 link 和@import 的区别是？&quot;">​</a></h2><ul><li>link属于HTML标签，而@import是CSS提供的;</li><li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li><li>import只在IE5以上才能识别，而link是HTML标签，无兼容问题;</li></ul><h2 id="浏览器默认的margin和padding不同" tabindex="-1">浏览器默认的margin和padding不同 <a class="header-anchor" href="#浏览器默认的margin和padding不同" aria-label="Permalink to &quot;浏览器默认的margin和padding不同&quot;">​</a></h2><ul><li>加一个全局的 *{margin:0;padding:0;} 来统一。</li></ul><h2 id="chrome-中文界面下默认会将小于-12px-的文本强制按照-12px-显示" tabindex="-1">Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示 <a class="header-anchor" href="#chrome-中文界面下默认会将小于-12px-的文本强制按照-12px-显示" aria-label="Permalink to &quot;Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示&quot;">​</a></h2><ul><li>可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决</li></ul><h2 id="超链接访问过后-hover-样式就不出现了-被点击访问过的超链接样式不在具有-hover-和-active-了" tabindex="-1">超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不在具有 hover 和 active 了 <a class="header-anchor" href="#超链接访问过后-hover-样式就不出现了-被点击访问过的超链接样式不在具有-hover-和-active-了" aria-label="Permalink to &quot;超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不在具有 hover 和 active 了&quot;">​</a></h2><ul><li>解决方法：改变CSS属性的排列顺序 L-V-H-A</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:link {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:visited {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:hover {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:active {}</span></span></code></pre></div><h2 id="上下margin重合问题-ie和ff都存在-相邻的两个div的margin-left和margin-right不会重合-但是margin-top和margin-bottom却会发生重合。" tabindex="-1">上下margin重合问题：ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。 <a class="header-anchor" href="#上下margin重合问题-ie和ff都存在-相邻的两个div的margin-left和margin-right不会重合-但是margin-top和margin-bottom却会发生重合。" aria-label="Permalink to &quot;上下margin重合问题：ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。&quot;">​</a></h2><ul><li>解决方法：养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。</li></ul><h2 id="重绘和重排-重排也叫回流" tabindex="-1">重绘和重排（重排也叫回流）： <a class="header-anchor" href="#重绘和重排-重排也叫回流" aria-label="Permalink to &quot;重绘和重排（重排也叫回流）：&quot;">​</a></h2><p>重绘（repaint或redraw）：当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。</p><p>触发重绘的条件：改变元素外观属性。如：color，background-color等。</p><p>重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。</p><p>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。</p><p>重排必定会引发重绘，但重绘不一定会引发重排。</p><p>触发重排的条件：任何页面布局和几何属性的改变都会触发重排，比如： 　　 1、页面渲染初始化；(无法避免)</p><p>2、添加或删除可见的DOM元素；</p><p>3、元素位置的改变，或者使用动画；</p><p>4、元素尺寸的改变——大小，外边距，边框；</p><p>5、浏览器窗口尺寸的变化（resize事件发生时）；</p><p>6、填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变；</p><p>7、读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height,　scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE)　)</p><p>重绘发生的情况： 重绘发生在元素的可见的外观被改变，但并没有影响到布局的时候。比如，仅修改DOM元素的字体颜色（只有Repaint，因为不需要调整布局）</p><p>重绘重排的代价：耗时，导致浏览器卡慢。</p>`,27),r=[n];function l(p,o,h,d,c,m){return e(),i("div",null,r)}const u=a(s,[["render",l]]);export{k as __pageData,u as default};
