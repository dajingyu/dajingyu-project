import{_ as e,c as a,o,a1 as t}from"./chunks/framework.DDqzfET5.js";const u=JSON.parse('{"title":"离线存储","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/HTML/离线存储.md","filePath":"前端基础/HTML/离线存储.md"}'),i={name:"前端基础/HTML/离线存储.md"},l=t('<h1 id="离线存储" tabindex="-1">离线存储 <a class="header-anchor" href="#离线存储" aria-label="Permalink to &quot;离线存储&quot;">​</a></h1><h2 id="离线访问" tabindex="-1">离线访问 <a class="header-anchor" href="#离线访问" aria-label="Permalink to &quot;离线访问&quot;">​</a></h2><ul><li>Application Cache（AppCache）</li></ul><h2 id="数据存储" tabindex="-1">数据存储 <a class="header-anchor" href="#数据存储" aria-label="Permalink to &quot;数据存储&quot;">​</a></h2><ul><li>localStorage/sessionStorage <ul><li>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</li><li>localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li></ul></li></ul><h2 id="websorage和cookie的区别" tabindex="-1">webSorage和cookie的区别 <a class="header-anchor" href="#websorage和cookie的区别" aria-label="Permalink to &quot;webSorage和cookie的区别&quot;">​</a></h2><ul><li><p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p></li><li><p>Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。</p></li><li><p>但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生</p></li><li><p>浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。</p></li><li><p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p></li></ul>',7),r=[l];function s(c,n,_,h,p,d){return o(),a("div",null,r)}const g=e(i,[["render",s]]);export{u as __pageData,g as default};
