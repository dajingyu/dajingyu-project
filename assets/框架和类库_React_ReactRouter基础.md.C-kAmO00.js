import{_ as s,c as a,o as i,a2 as t}from"./chunks/framework.By8LAshg.js";const n="/dajingyu-project/assets/1.CusO60Rn.png",e="/dajingyu-project/assets/2.B6pT_RTO.png",h="/dajingyu-project/assets/3.xFBQJxNH.png",l="/dajingyu-project/assets/4.C42Obsjv.png",p="/dajingyu-project/assets/5.DEdfvGLc.png",r="/dajingyu-project/assets/6.DAenXCZL.png",k="/dajingyu-project/assets/7.Ca5u6oRe.png",o="/dajingyu-project/assets/8.B-taYH2U.png",d="/dajingyu-project/assets/9.eeA_S-PB.png",c="/dajingyu-project/assets/10.bx86ToNv.png",g="/dajingyu-project/assets/11.DBSrnG5Q.png",R=JSON.parse('{"title":"路由快速上手","description":"","frontmatter":{},"headers":[],"relativePath":"框架和类库/React/ReactRouter基础.md","filePath":"框架和类库/React/ReactRouter基础.md"}'),E={name:"框架和类库/React/ReactRouter基础.md"},u=t('<h1 id="路由快速上手" tabindex="-1">路由快速上手 <a class="header-anchor" href="#路由快速上手" aria-label="Permalink to &quot;路由快速上手&quot;">​</a></h1><h2 id="_1-什么是前端路由" tabindex="-1">1. 什么是前端路由 <a class="header-anchor" href="#_1-什么是前端路由" aria-label="Permalink to &quot;1. 什么是前端路由&quot;">​</a></h2><p>一个路径 path 对应一个组件 component 当我们在浏览器中访问一个 path 的时候，path 对应的组件会在页面中进行渲染 <img src="'+n+`" alt="image.png"></p><h2 id="_2-创建路由开发环境" tabindex="-1">2. 创建路由开发环境 <a class="header-anchor" href="#_2-创建路由开发环境" aria-label="Permalink to &quot;2. 创建路由开发环境&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用CRA创建项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-router-pro</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装最新的ReactRouter包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-router-dom</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><h2 id="_3-快速开始" tabindex="-1">3. 快速开始 <a class="header-anchor" href="#_3-快速开始" aria-label="Permalink to &quot;3. 快速开始&quot;">​</a></h2><p><img src="`+e+`" alt="image.png"></p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBrowserRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;登录&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/article&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;文章&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RouterProvider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{router}/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h1 id="抽象路由模块" tabindex="-1">抽象路由模块 <a class="header-anchor" href="#抽象路由模块" aria-label="Permalink to &quot;抽象路由模块&quot;">​</a></h1><p><img src="`+h+'" alt="image.png"></p><h1 id="路由导航" tabindex="-1">路由导航 <a class="header-anchor" href="#路由导航" aria-label="Permalink to &quot;路由导航&quot;">​</a></h1><h2 id="_1-什么是路由导航" tabindex="-1">1. 什么是路由导航 <a class="header-anchor" href="#_1-什么是路由导航" aria-label="Permalink to &quot;1. 什么是路由导航&quot;">​</a></h2><p>路由系统中的多个路由之间需要进行路由跳转，并且在跳转的同时有可能需要传递参数进行通信 <img src="'+l+'" alt="image.png"></p><h2 id="_2-声明式导航" tabindex="-1">2. 声明式导航 <a class="header-anchor" href="#_2-声明式导航" aria-label="Permalink to &quot;2. 声明式导航&quot;">​</a></h2><blockquote><p>声明式导航是指通过在模版中通过 <code>&lt;Link/&gt; </code> 组件描述出要跳转到哪里去，比如后台管理系统的左侧菜单通常使用这种方式进行</p></blockquote><p><img src="'+p+'" alt="image.png"></p><p>语法说明：通过给组件的to属性指定要跳转到路由path，组件会被渲染为浏览器支持的a链接，如果需要传参直接通过字符串拼接的方式拼接参数即可</p><h2 id="_3-编程式导航" tabindex="-1">3. 编程式导航 <a class="header-anchor" href="#_3-编程式导航" aria-label="Permalink to &quot;3. 编程式导航&quot;">​</a></h2><p>编程式导航是指通过 <code>useNavigate</code> 钩子得到导航方法，然后通过调用方法以命令式的形式进行路由跳转，比如想在登录请求完毕之后跳转就可以选择这种方式，更加灵活</p><p><img src="'+r+'" alt="image.png"></p><p>语法说明：通过调用navigate方法传入地址path实现跳转</p><h1 id="导航传参" tabindex="-1">导航传参 <a class="header-anchor" href="#导航传参" aria-label="Permalink to &quot;导航传参&quot;">​</a></h1><p><img src="'+k+'" alt="image.png"></p><h1 id="嵌套路由配置" tabindex="-1">嵌套路由配置 <a class="header-anchor" href="#嵌套路由配置" aria-label="Permalink to &quot;嵌套路由配置&quot;">​</a></h1><h2 id="_1-什么是嵌套路由" tabindex="-1">1. 什么是嵌套路由 <a class="header-anchor" href="#_1-什么是嵌套路由" aria-label="Permalink to &quot;1. 什么是嵌套路由&quot;">​</a></h2><p>在一级路由中又内嵌了其他路由，这种关系就叫做嵌套路由，嵌套至一级路由内的路由又称作二级路由，例如： <img src="'+o+'" alt="image.png"></p><h2 id="_2-嵌套路由配置" tabindex="-1">2. 嵌套路由配置 <a class="header-anchor" href="#_2-嵌套路由配置" aria-label="Permalink to &quot;2. 嵌套路由配置&quot;">​</a></h2><blockquote><p>实现步骤</p><ol><li>使用 <code>children</code>属性配置路由嵌套关系</li><li>使用 <code>&lt;Outlet/&gt;</code> 组件配置二级路由渲染位置</li></ol></blockquote><p><img src="'+d+'" alt="image.png"></p><h2 id="_3-默认二级路由" tabindex="-1">3. 默认二级路由 <a class="header-anchor" href="#_3-默认二级路由" aria-label="Permalink to &quot;3. 默认二级路由&quot;">​</a></h2><p>当访问的是一级路由时，默认的二级路由组件可以得到渲染，只需要在二级路由的位置去掉path，设置index属性为true</p><p><img src="'+c+'" alt="image.png"></p><h2 id="_4-404路由配置" tabindex="-1">4. 404路由配置 <a class="header-anchor" href="#_4-404路由配置" aria-label="Permalink to &quot;4. 404路由配置&quot;">​</a></h2><p>场景：当浏览器输入url的路径在整个路由配置中都找不到对应的 path，为了用户体验，可以使用 404 兜底组件进行渲染</p><p>实现步骤：</p><ol><li>准备一个NotFound组件</li><li>在路由表数组的末尾，以*号作为路由path配置路由</li></ol><p><img src="'+g+'" alt="image.png"></p><h2 id="_5-俩种路由模式" tabindex="-1">5. 俩种路由模式 <a class="header-anchor" href="#_5-俩种路由模式" aria-label="Permalink to &quot;5. 俩种路由模式&quot;">​</a></h2><p>各个主流框架的路由常用的路由模式有俩种，history模式和hash模式, ReactRouter分别由 createBrowerRouter 和 createHashRouter 函数负责创建</p><table tabindex="0"><thead><tr><th>路由模式</th><th>url表现</th><th>底层原理</th><th>是否需要后端支持</th></tr></thead><tbody><tr><td>history</td><td>url/login</td><td>history对象 + pushState事件</td><td>需要</td></tr><tr><td>hash</td><td>url/#/login</td><td>监听hashChange事件</td><td>不需要</td></tr></tbody></table>',40),y=[u];function m(_,F,b,q,C,B){return i(),a("div",null,y)}const f=s(E,[["render",m]]);export{R as __pageData,f as default};
